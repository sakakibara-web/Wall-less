using UnityEngine;
using UnityEngine.UI;
using System.Collections;

[RequireComponent(typeof(Canvas))]
public class ImageBlinker : MonoBehaviour
{
    [Header("?A?j???[?V?????????? Image")]
    [Tooltip("?_???E?X?P?[???A?j???[?V???????????? UI Image ???Z?b?g")]
    public Image targetImage;

    [Header("?^?C?~???O????")]
    [Tooltip("Canvas ????????A?j???[?V?????J?n?????????@?????i?b?j")]
    public float initialDelay = 5f;
    [Tooltip("???^?X?P?[???????S?????[?v?????????????i?b?j")]
    public float blinkPeriod = 1f;

    [Header("?? ?l????")]
    [Tooltip("?????A???t?@?l")]
    public float lowAlpha = 0.2f;
    [Tooltip("?????A???t?@?l")]
    public float highAlpha = 0.7f;


    private Color originalColor;
    private float startTime;

    void Awake()
    {
        if (targetImage == null)
        {
            Debug.LogError("SmoothImageAnimator: targetImage ???A?T?C?????????????????B");
            enabled = false;
            return;
        }

        // ?????????\????????????
        targetImage.enabled = false;
        originalColor = targetImage.color;
    }

    void OnEnable()
    {
        startTime = Time.time;
    }

    void Update()
    {
        float elapsed = Time.time - startTime;

        // ?????x????????????????
        if (elapsed < initialDelay)
            return;

        // 5?b?o?????????x?????\?????I??
        if (!targetImage.enabled)
            targetImage.enabled = true;

        // ?A?j???[?V?????p?? t ???T?C???g???????i0??1??0 ?????????????[?v?j
        float animTime = elapsed - initialDelay;
        float t = (Mathf.Sin(animTime * (2f * Mathf.PI / blinkPeriod)) + 1f) / 2f;

        // ?? ?l???X?P?[???? Lerp
        var c = originalColor;
        c.a = Mathf.Lerp(lowAlpha, highAlpha, t);
        targetImage.color = c;

    }
}
